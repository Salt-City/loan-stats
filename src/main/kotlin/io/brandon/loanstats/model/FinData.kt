package io.brandon.loanstats.model

import arrow.core.Either
import arrow.core.left
import io.brandon.loanstats.error.LoanStatsError
import java.math.BigDecimal

/**
 * Based off looking at the data I feel like although most of the data is consistent, we really shouldn't
 * be expecting that any field is required. The data looks like it comes from an unreliable source (looks like a collection of human input)
 */
data class FinData(
    val id: Long,
    val memberId: String?,
    val loanAmount: Float?,
    val fundedAmount: Float?,
    val fundedAmountInv: Float?,
    val term: String?,
    val intRate: Float?,
    val installment: Float?,
    val grade: String?,
    val subGrade: String?,
    val employeeTitle: String?,
    val employeeLength: String?,
    val homeOwnerShip: Ownership?,
    val annualIncome: Int?,
    val verificationStatus: Verification?,
    val issued: String?, // might change this later
    val loanStatus: LoanStatus?,
    val paymentPlan: String?,
    val url: String?,
    val desc: String?,
    val purpose: String?,
    val title: String?,
    val zipCode: String?,
    val addressState: State?,
    val dti: Float?,
    val delinqTwoYears: Int?,
    val earliestCrLine: String?,
    val ficoRangeLow: Int?,
    val ficoRangeHigh: Int?,
    val inqLastSixMonths: Int?,
    val monthsSinceLastDelinq: Int?,
    val monthsSinceLastRecord: Int?,
    val openAccounts: Int?,
    val publicRecords: Int?,
    val revolBal: Int?,
    val revolUtil: Float?,
    val totalAcc: Int?,
    val initialListStatus: Char?,
    val outPrncp: Float?,
    val outPrncpInv: Float?,
    val totalPayment: BigDecimal?,
    val totalPaymentInv: Float?,
    val totalRecPrncp: Float?,
    val totalRecInt: Float?,
    val totalRecLateFee: Float?,
    val recoveries: Float,
    val collectionRecoveryFee: Float?,
    val lastPaymentD: String?,
    val lastPaymentAmount: Float?,
    val nextPaymentD: String?,
    val lastCreditPullD: String?,
    val lastFicoRangeHigh: Int?,
    val lastFicoRangeLow: Int?,
    val collectionsTwelveMonthsExMed: Int?,
    val monthsSinceLastMajorDerog: Int?,
    val policyCode: Int?,
    val applicationType: ApplicationType?,
    val annualIncJoint: Int?,
    val dtiJoint: Int?,
    val verificationStatusJoint: Verification?,
    val accNowDelinq: Int?,
    val totCollectionAmount: Int?,
    val totalCurrentBalance: Int?,
    val openAccSixMonths: Int?,
    val openAccountIl: Int?,
    val openIlTwelveMonths: Int?,
    val openIlTwentyFourMonths: Int?,
    val monthsSinceRcntIl: Int?,
    val totalBalIl: Int?,
    val ilUtil: Int?,
    val openRvTwelveMonths: Int?,
    val openRvTwentyFourMonths: Int?,
    val maxBalBc: Int?,
    val allUtil: Int?,
    val totalRevHiLim: Int?,
    val inqFi: Int?,
    val totalCuTl: Int?,
    val inqLastTwelveMonths: Int?,
    val accOpenPastTwentyFourMonths: Int?,
    val averageCurrentBalance: Int?,
    val bcOpenToBuy: Int?,
    val bcUtil: Float?,
    val chargeOffWithinTwelveMonths: Int?,
    val delinqAmount: Int?,
    val monthsSinceOldIlAccount: Int?,
    val monthsSinceOldRevIlAccount: Int?,
    val monthsSinceOldRcntRevTlOp: Int?,
    val monthsSinceRcntTl: Int?,
    val mortgageAccount: Int?,
    val monthsSinceRecentBc: Int?,
    val monthsSinceRecentBcDlq: Int?,
    val monthsSinceRecentInq: Int?,
    val monthsSinceRecentRevolDelinq: Int?,
    val numberAccountsOverOneTwentyPd: Int?,
    val numberActiveBcTl: Int?,
    val numberActiveRevTi: Int?,
    val numberBcSats: Int?,
    val numberBcTi: Int?,
    val numberIlTi: Int?,
    val numberOpRevTl: Int?,
    val numberRevAccounts: Int?,
    val numberRevTiBalGtZero: Int?,
    val numSats: Int?,
    val numTiOneTwentyDpdTwoM: Int?,
    val numTiThirtyDpd: Int?,
    val numTiNinetygDpdTwentyFourM: Int?,
    val numberTiOpPastTwelveMonths: Int?,
    val pctTiNvrDlq: Int?,
    val percentBcGtSeventyFive: Int?,
    val pubRecBankruptcies: Int?,
    val taxLiens: Int?,
    val totHiCredLimit: Int?,
    val totalBalExMort: Int?,
    val totalBcLimit: Int?,
    val totalIlHighCreditLimit: Int?,
    val revolBalJoint: Int?,
    val secAppFicoRangeLow: Int?,
    val secAppFicoRangeHigh: Int?,
    val secAppEarliestCreditLine: String?,
    val secAppInqLastSixMonths: Int?,
    val secAppMortAccount: Int?,
    val secAppOpenAccounts: Int?,
    val secAppRevolUtil: Float?,
    val secAppOpenAccountIl: Int?,
    val secAppNumRevAccounts: Int?,
    val secAppChargeOffWithinTwelveMonths: Int?,
    val secAppCollectionsTwelveMonthsExMed: Int?,
    val secAppMonthsSinceLAstMajorDerog: Int?,
    val hardshipFlag: Char?,
    val hardshipType: String?,
    val hardshipReason: String?,
    val hardshipStatus: String?,
    val deferralTerm: String?,
    val hardshipAmount: Float?,
    val hardshipStartDate: String?,
    val hardShipEndDate: String?,
    val paymentPlanStartDate: String,
    val hardshipLength: Int?,
    val hardshipDpd: Int?,
    val hardshipLoanStatus: String,
    val origProjectedAdditionalAccruedInterest: String?,
    val hardshipPayoffBalanceAmount: Float?,
    val hardshipLastPaymentAmount: Float?,
    val deptSettlementFlag: Char?,
    val debtSettlementFlagDate: String?,
    val settlementStatus: String?,
    val settlementDate: String?,
    val settlementAmount: Int?,
    val settlementPercentage: Int?,
    val settlementTerm: Int?
) {
    companion object {
        fun fromLine(s: String): Either<LoanStatsError, FinData> {
            val finDataTuple = s.replace("\"", "").split(",")
            return if (finDataTuple.size < 150) {
                Either.Left(LoanStatsError.LineParseError("Line is does not have the correct number of elements! (line size: ${finDataTuple.size} \n Line: $s"))
            } else {
                Either.catch {
                    FinData(
                        id = finDataTuple[0].toLong(),
                        memberId = finDataTuple[1],
                        loanAmount = finDataTuple[2].toFloatOrNull(),
                        fundedAmount = finDataTuple[3].toFloatOrNull(),
                        fundedAmountInv = finDataTuple[4].toFloatOrNull(),
                        term = finDataTuple[5],
                        intRate = finDataTuple[6].replace("%", "").toFloatOrNull(),
                        installment = finDataTuple[7].toFloatOrNull(),
                        grade = finDataTuple[8],
                        subGrade = finDataTuple[9],
                        employeeTitle = finDataTuple[10],
                        employeeLength = finDataTuple[11],
                        homeOwnerShip = Ownership.fromString(finDataTuple[12]),
                        annualIncome = finDataTuple[13].toIntOrNull(),
                        verificationStatus = Verification.fromString(finDataTuple[14]),
                        issued = finDataTuple[15],
                        loanStatus = LoanStatus.fromString(finDataTuple[16]),
                        paymentPlan = finDataTuple[17],
                        url = finDataTuple[18],
                        desc = finDataTuple[19],
                        purpose = finDataTuple[20],
                        title = finDataTuple[21],
                        zipCode = finDataTuple[22],
                        addressState = State.fromString(finDataTuple[23]),
                        dti = finDataTuple[24].toFloatOrNull(),
                        delinqTwoYears = finDataTuple[25].toIntOrNull(),
                        earliestCrLine = finDataTuple[26],
                        ficoRangeLow = finDataTuple[27].toIntOrNull(),
                        ficoRangeHigh = finDataTuple[28].toIntOrNull(),
                        inqLastSixMonths = finDataTuple[29].toIntOrNull(),
                        monthsSinceLastDelinq = finDataTuple[30].toIntOrNull(),
                        monthsSinceLastRecord = finDataTuple[31].toIntOrNull(),
                        openAccounts = finDataTuple[32].toIntOrNull(),
                        publicRecords = finDataTuple[33].toIntOrNull(),
                        revolBal = finDataTuple[34].toIntOrNull(),
                        revolUtil = finDataTuple[35].replace("%", "").toFloatOrNull(),
                        totalAcc = finDataTuple[36].toIntOrNull(),
                        initialListStatus = finDataTuple[37].getOrNull(0),
                        outPrncp = finDataTuple[38].toFloatOrNull(),
                        outPrncpInv = finDataTuple[39].toFloatOrNull(),
                        totalPayment = finDataTuple[40].toBigDecimalOrNull(),
                        totalPaymentInv = finDataTuple[41].toFloatOrNull(),
                        totalRecPrncp = finDataTuple[42].toFloatOrNull(),
                        totalRecInt = finDataTuple[43].toFloatOrNull(),
                        totalRecLateFee = finDataTuple[44].toFloatOrNull(),
                        recoveries = finDataTuple[45].toFloat(),
                        collectionRecoveryFee = finDataTuple[46].toFloatOrNull(),
                        lastPaymentD = finDataTuple[47],
                        lastPaymentAmount = finDataTuple[48].toFloatOrNull(),
                        nextPaymentD = finDataTuple[49],
                        lastCreditPullD = finDataTuple[50],
                        lastFicoRangeHigh = finDataTuple[51].toIntOrNull(),
                        lastFicoRangeLow = finDataTuple[52].toIntOrNull(),
                        collectionsTwelveMonthsExMed = finDataTuple[53].toIntOrNull(),
                        monthsSinceLastMajorDerog = finDataTuple[54].toIntOrNull(),
                        policyCode = finDataTuple[55].toIntOrNull(),
                        applicationType = ApplicationType.fromString(finDataTuple[56]),
                        annualIncJoint = finDataTuple[57].toIntOrNull(),
                        dtiJoint = finDataTuple[58].toIntOrNull(),
                        verificationStatusJoint = Verification.fromString(finDataTuple[59]),
                        accNowDelinq = finDataTuple[60].toIntOrNull(),
                        totCollectionAmount = finDataTuple[61].toIntOrNull(),
                        totalCurrentBalance = finDataTuple[62].toIntOrNull(),
                        openAccSixMonths = finDataTuple[63].toIntOrNull(),
                        openAccountIl = finDataTuple[64].toIntOrNull(),
                        openIlTwelveMonths = finDataTuple[65].toIntOrNull(),
                        openIlTwentyFourMonths = finDataTuple[66].toIntOrNull(),
                        monthsSinceRcntIl = finDataTuple[67].toIntOrNull(),
                        totalBalIl =  finDataTuple[68].toIntOrNull(),
                        ilUtil = finDataTuple[69].toIntOrNull(),
                        openRvTwelveMonths = finDataTuple[70].toIntOrNull(),
                        openRvTwentyFourMonths = finDataTuple[71].toIntOrNull(),
                        maxBalBc = finDataTuple[72].toIntOrNull(),
                        allUtil = finDataTuple[73].toIntOrNull(),
                        totalRevHiLim = finDataTuple[74].toIntOrNull(),
                        inqFi = finDataTuple[75].toIntOrNull(),
                        totalCuTl = finDataTuple[76].toIntOrNull(),
                        inqLastTwelveMonths = finDataTuple[77].toIntOrNull(),
                        accOpenPastTwentyFourMonths = finDataTuple[78].toIntOrNull(),
                        averageCurrentBalance = finDataTuple[79].toIntOrNull(),
                        bcOpenToBuy = finDataTuple[80].toIntOrNull(),
                        bcUtil = finDataTuple[81].toFloatOrNull(),
                        chargeOffWithinTwelveMonths = finDataTuple[82].toIntOrNull(),
                        delinqAmount = finDataTuple[83].toIntOrNull(),
                        monthsSinceOldIlAccount = finDataTuple[84].toIntOrNull(),
                        monthsSinceOldRevIlAccount = finDataTuple[85].toIntOrNull(),
                        monthsSinceOldRcntRevTlOp = finDataTuple[86].toIntOrNull(),
                        monthsSinceRcntTl = finDataTuple[87].toIntOrNull(),
                        mortgageAccount = finDataTuple[88].toIntOrNull(),
                        monthsSinceRecentBc = finDataTuple[89].toIntOrNull(),
                        monthsSinceRecentBcDlq = finDataTuple[90].toIntOrNull(),
                        monthsSinceRecentInq = finDataTuple[91].toIntOrNull(),
                        monthsSinceRecentRevolDelinq = finDataTuple[92].toIntOrNull(),
                        numberAccountsOverOneTwentyPd = finDataTuple[93].toIntOrNull(),
                        numberActiveBcTl = finDataTuple[94].toIntOrNull(),
                        numberActiveRevTi = finDataTuple[95].toIntOrNull(),
                        numberBcSats = finDataTuple[96].toIntOrNull(),
                        numberBcTi = finDataTuple[97].toIntOrNull(),
                        numberIlTi = finDataTuple[98].toIntOrNull(),
                        numberOpRevTl = finDataTuple[99].toIntOrNull(),
                        numberRevAccounts = finDataTuple[100].toIntOrNull(),
                        numberRevTiBalGtZero = finDataTuple[101].toIntOrNull(),
                        numSats = finDataTuple[102].toIntOrNull(),
                        numTiOneTwentyDpdTwoM = finDataTuple[103].toIntOrNull(),
                        numTiThirtyDpd = finDataTuple[104].toIntOrNull(),
                        numTiNinetygDpdTwentyFourM = finDataTuple[105].toIntOrNull(),
                        numberTiOpPastTwelveMonths = finDataTuple[106].toIntOrNull(),
                        pctTiNvrDlq = finDataTuple[107].toIntOrNull(),
                        percentBcGtSeventyFive = finDataTuple[108].toIntOrNull(),
                        pubRecBankruptcies = finDataTuple[109].toIntOrNull(),
                        taxLiens = finDataTuple[110].toIntOrNull(),
                        totHiCredLimit = finDataTuple[111].toIntOrNull(),
                        totalBalExMort = finDataTuple[112].toIntOrNull(),
                        totalBcLimit = finDataTuple[113].toIntOrNull(),
                        totalIlHighCreditLimit = finDataTuple[114].toIntOrNull(),
                        revolBalJoint = finDataTuple[115].toIntOrNull(),
                        secAppFicoRangeLow = finDataTuple[116].toIntOrNull(),
                        secAppFicoRangeHigh = finDataTuple[117].toIntOrNull(),
                        secAppEarliestCreditLine = finDataTuple[118],
                        secAppInqLastSixMonths = finDataTuple[119].toIntOrNull(),
                        secAppMortAccount = finDataTuple[120].toIntOrNull(),
                        secAppOpenAccounts = finDataTuple[121].toIntOrNull(),
                        secAppRevolUtil = finDataTuple[122].toFloatOrNull(),
                        secAppOpenAccountIl = finDataTuple[123].toIntOrNull(),
                        secAppNumRevAccounts = finDataTuple[124].toIntOrNull(),
                        secAppChargeOffWithinTwelveMonths = finDataTuple[125].toIntOrNull(),
                        secAppCollectionsTwelveMonthsExMed = finDataTuple[126].toIntOrNull(),
                        secAppMonthsSinceLAstMajorDerog = finDataTuple[127].toIntOrNull(),
                        hardshipFlag = finDataTuple[128].getOrNull(0),
                        hardshipType = finDataTuple[129],
                        hardshipReason = finDataTuple[130],
                        hardshipStatus = finDataTuple[131],
                        deferralTerm = finDataTuple[132],
                        hardshipAmount = finDataTuple[133].toFloatOrNull(),
                        hardshipStartDate = finDataTuple[134],
                        hardShipEndDate = finDataTuple[135],
                        paymentPlanStartDate = finDataTuple[136],
                        hardshipLength = finDataTuple[137].toIntOrNull(),
                        hardshipDpd = finDataTuple[138].toIntOrNull(),
                        hardshipLoanStatus = finDataTuple[139],
                        origProjectedAdditionalAccruedInterest = finDataTuple[140],
                        hardshipPayoffBalanceAmount = finDataTuple[141].toFloatOrNull(),
                        hardshipLastPaymentAmount = finDataTuple[142].toFloatOrNull(),
                        deptSettlementFlag = finDataTuple[143].getOrNull(0),
                        debtSettlementFlagDate = finDataTuple[144],
                        settlementStatus = finDataTuple[145],
                        settlementDate = finDataTuple[146],
                        settlementAmount = finDataTuple[147].toIntOrNull(),
                        settlementPercentage = finDataTuple[148].toIntOrNull(),
                        settlementTerm = finDataTuple[149].toIntOrNull()
                    )
                }.fold(
                    ifLeft = { t -> Either.Left(LoanStatsError.LineParseError("There was an error creating a FinData object with error ${t.message} from Line: \n $s")) },
                    ifRight = { Either.Right(it) }
                )
            }
        }
    }
}
